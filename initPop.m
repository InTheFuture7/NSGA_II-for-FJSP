% 初始调度种群生成 J 工件相关信息，p为基于工序的编码
% m为对应的机器编码  n为所选设备在对应可选设备集中的序列号
function [p,m,n]= initPop(J)
    p=[];  % 基于工序的编码
    % m(1:size(p,2))=0;  % 基于机器编码的染色体
    m=[];
    n=[];
    for i=1:size(J, 2)  % 参与调度的工件数 8
        for j=1:J(i).a(1)  % 该工序的工序
            p(size(p,2)+1)=i;  % 每次循环，都会在 p 的末尾添加一个新的元素。
        end
    end
    % 编码的每一位代表一道工序，该位数字的值代表工件的编号，而编号在序列中出现的次数则代表该工序属于工件的第几道工序
    r=randperm(size(p,2));
    p=p(1,r);  % 生产有效的随机的基于工序编码。打乱顺序

%-------------基于工序编码生成对应的基于机器的编码-------------%
    for i=1:size(J,2)
        f{i}=find(p==i);  % 找出工件i在工序染色体中所对应的序号
        for j=1:J(i).a(1)  % 讨论工件i的每道工序j
            k=f{i}(j);
            s=size(J(i).m{j},2);  % 工件i的第j道工序可用加工机器数
            num=randperm(s,1);  % 随机初始化一个从1到s的整数
            n(k)=num;  % n为所选设备在对应可选设备集中的序列号。比如O11用机器7加工，7在工序1的可选设备[2,6,7]中序号为3
            m(k)=J(i).m{j}(num);  % 从工件i的第j道工序可用加工机器中，选一个机器去加工
            % m(f{i}(j))=J(i).m{j}(randperm(size(J(i).m{j},2),1));
        end
    end
end

